import os
from pathlib import Path
from typing import List

from dotenv import load_dotenv

from agents.agent_responses import AnalysisInsights
from output_generators import sanitize
from utils import contains_json


def generated_mermaid_str(
    analysis: AnalysisInsights, linked_files: List[Path], repo_ref: str, project: str, demo=False
) -> str:
    lines = ["```mermaid", "graph LR"]

    # 1. Define each component as a node, including its description
    for comp in analysis.components:
        node_id = sanitize(comp.name)
        # Show name and short description in the node label
        label = f"{comp.name}"
        lines.append(f'    {node_id}["{label}"]')

    # 2. Add relations as labeled edges
    for rel in analysis.components_relations:
        src_id = sanitize(rel.src_name)
        dst_id = sanitize(rel.dst_name)
        # Use the relation phrase as the edge label
        lines.append(f'    {src_id} -- "{rel.relation}" --> {dst_id}')

    # Linking to other files with new MDX format
    for comp in analysis.components:
        node_id = sanitize(comp.name)
        if contains_json(node_id, linked_files):
            # Create a link to the component's details file using new format
            lines.append(f'    click {node_id} href "/codeboarding/{node_id}.md" "Details"')

    lines.append("```")
    return "\n".join(lines)


def generate_frontmatter(file_name: str, component_name: str = None) -> str:
    """Generate frontmatter for MDX files."""
    if file_name == "on_boarding" or file_name == "analysis" or not component_name:
        return """---
title: "Architecture Overview"
description: "Comprehensive architectural overview of the mcp-agent framework"
icon: "network"
---

"""
    else:
        return f"# {component_name}"


def generate_mdx(
    insights: AnalysisInsights,
    project: str = "",
    repo_ref="",
    linked_files=None,
    demo=False,
    file_name: str = "on_boarding",
) -> str:
    """
    Generate MDX content from an AnalysisInsights object.
    """
    # Generate frontmatter
    frontmatter = generate_frontmatter(file_name, component_name=file_name.replace("_", " ").strip())

    mermaid_str = generated_mermaid_str(
        insights, repo_ref=repo_ref, linked_files=linked_files, project=project, demo=demo
    )

    lines = [frontmatter, mermaid_str]

    # Add Info component instead of badges
    if file_name == "on_boarding":
        info_component = """
<Info>
This documentation was generated by [CodeBoarding](https://github.com/CodeBoarding/GeneratedOnBoardings) to provide comprehensive architectural insights into the mcp-agent framework.
</Info>"""

        lines.append(info_component)

    detail_lines = ["\n### Details\n", f"{insights.description}\n"]

    root_dir = os.getenv("REPO_ROOT") + "/" + project

    for comp in insights.components:
        detail_lines.append(component_header(comp.name, linked_files, demo))
        detail_lines.append(f"{comp.description}")
        if comp.referenced_source_code:
            qn_list = []
            for reference in comp.referenced_source_code:
                print(reference.reference_file, root_dir)
                if reference.reference_start_line is None or reference.reference_end_line is None:
                    qn_list.append(f"{reference.llm_str()}")
                    continue
                if not reference.reference_file:
                    continue
                if not reference.reference_file.startswith(root_dir) and reference.reference_file.startswith("/"):
                    qn_list.append(f"{reference.llm_str()}")
                    continue
                # Now try to resolve URL:

                url = "/".join(repo_ref.split("/")[:7])
                if root_dir not in reference.reference_file:
                    # If the reference file is not in the root directory, we need to adjust the URL
                    # This assumes that the repo_ref is a valid GitHub URL
                    ref_url = f"{url}/{reference.reference_file}"
                else:
                    ref_url = url + reference.reference_file.split(root_dir)[1]
                if not (reference.reference_start_line == 0 and reference.reference_end_line == 0):
                    ref_url += f"#L{reference.reference_start_line}-L{reference.reference_end_line}"
                qn_list.append(
                    f'<a href="{ref_url}" target="_blank" rel="noopener noreferrer">{reference.llm_str()}</a>'
                )
            # Join the list into an unordered markdown list, without the leading dash
            references = ""
            for item in qn_list:
                references += f"- {item}\n"

            detail_lines.append(f"\n\n**Related Classes/Methods**:\n\n{references}")
        else:
            detail_lines.append(f"\n\n**Related Classes/Methods**: _None_")
        detail_lines.append("")  # blank line between components

    return "\n".join(lines + detail_lines)


def generate_mdx_file(
    file_name: str,
    insights: AnalysisInsights,
    project: str,
    repo_ref: str,
    linked_files,
    temp_dir: Path,
    demo: bool = False,
) -> Path:
    content = generate_mdx(
        insights, project=project, repo_ref=repo_ref, linked_files=linked_files, demo=demo, file_name=file_name
    )
    mdx_file = temp_dir / f"{file_name}.mdx"
    with open(mdx_file, "w") as f:
        f.write(content)
    return mdx_file


def component_header(component_name: str, link_files: List[Path], demo: bool = False) -> str:
    """
    Generate a header for a component with its name and a link to its details.
    """
    sanitized_name = sanitize(component_name)
    if contains_json(sanitized_name, link_files) and demo:
        return f"### {component_name} [[Expand]](./{sanitized_name})"
    else:
        return f"### {component_name}"
