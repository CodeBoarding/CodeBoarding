{
  "description": "This static analysis subsystem is designed to process source code and configuration files, with a specialized focus on TypeScript projects. The `Code Scanner` initiates the process by performing lexical and syntactical analysis, now enhanced with dedicated capabilities for parsing TypeScript configuration files to provide richer context. The `Reference Resolver` then builds upon this foundation by identifying and resolving symbolic relationships within the code. The `LSP Client (TypeScript)` acts as the primary interface for developers, leveraging the combined outputs of the `Code Scanner` and `Reference Resolver` to deliver real-time code intelligence. Finally, the `Analysis Result Provider` aggregates and formats all generated analysis data, making it ready for further processing by an AI interpretation layer to derive architectural insights and documentation. This architecture ensures a robust and comprehensive analysis pipeline, particularly for complex TypeScript applications.",
  "components": [
    {
      "name": "Code Scanner",
      "description": "This component performs the initial lexical and syntactical analysis of source code, breaking it down into tokens and constructing an intermediate representation (e.g., an Abstract Syntax Tree). It now includes specialized capabilities for processing TypeScript configuration files, providing crucial context for TypeScript projects. This foundational input serves as the basis for further analysis.",
      "referenced_source_code": [
        {
          "qualified_name": "static_analyzer.scanner",
          "reference_file": "static_analyzer/scanner.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "static_analyzer.typescript_config_scanner",
          "reference_file": "static_analyzer/typescript_config_scanner.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "../../static_analyzer/scanner.py",
        "static_analyzer/typescript_config_scanner.py"
      ],
      "can_expand": true
    },
    {
      "name": "Reference Resolver",
      "description": "This component identifies and resolves symbolic references within the code, such as variable declarations, function calls, class definitions, and imports. It builds a comprehensive understanding of how different code elements relate to each other, crucial for semantic analysis.",
      "referenced_source_code": [
        {
          "qualified_name": "static_analyzer.reference_resolve_mixin",
          "reference_file": "static_analyzer/reference_resolve_mixin.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "../../static_analyzer/reference_resolve_mixin.py"
      ],
      "can_expand": true
    },
    {
      "name": "LSP Client (TypeScript)",
      "description": "This component acts as the interface for integrating the static analysis capabilities with the VS Code environment, specifically tailored for TypeScript. It communicates via the Language Server Protocol (LSP) to enable real-time code intelligence features like go-to-definition, hover information, and diagnostics, leveraging the enhanced TypeScript configuration analysis.",
      "referenced_source_code": [
        {
          "qualified_name": "static_analyzer.lsp_client.typescript_client",
          "reference_file": "static_analyzer/lsp_client/typescript_client.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "vscode_constants",
          "reference_file": "vscode_constants.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "../../vscode_constants.py",
        "../../static_analyzer/lsp_client/typescript_client.py"
      ],
      "can_expand": true
    },
    {
      "name": "Analysis Result Provider",
      "description": "This component is responsible for gathering and formatting the comprehensive output from the `Code Scanner` (including TypeScript configuration data) and `Reference Resolver`. It structures the analysis results into a consumable format specifically designed for subsequent processing by the `AI Interpretation Layer` to generate architectural insights and documentation.",
      "referenced_source_code": [
        {
          "qualified_name": "agents.abstraction_agent",
          "reference_file": "agents/abstraction_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [],
      "can_expand": true
    },
    {
      "name": "Unclassified",
      "description": "Component for all unclassified files and utility functions (Utility functions/External Libraries/Dependencies)",
      "referenced_source_code": [],
      "assigned_files": [
        "../../vscode_runnable.py",
        "../../static_analyzer/programming_language.py",
        "../../static_analyzer/__init__.py",
        "../../static_analyzer/graph.py",
        "../../static_analyzer/analysis_result.py",
        "../../static_analyzer/lsp_client/__init__.py",
        "../../static_analyzer/lsp_client/client.py"
      ],
      "can_expand": false
    }
  ],
  "components_relations": [
    {
      "relation": "provides parsed output to",
      "src_name": "Code Scanner",
      "dst_name": "Reference Resolver"
    },
    {
      "relation": "contributes findings to",
      "src_name": "Code Scanner",
      "dst_name": "LSP Client (TypeScript)"
    },
    {
      "relation": "provides data to",
      "src_name": "Code Scanner",
      "dst_name": "Analysis Result Provider"
    },
    {
      "relation": "contributes findings to",
      "src_name": "Reference Resolver",
      "dst_name": "LSP Client (TypeScript)"
    },
    {
      "relation": "provides data to",
      "src_name": "Reference Resolver",
      "dst_name": "Analysis Result Provider"
    }
  ]
}
