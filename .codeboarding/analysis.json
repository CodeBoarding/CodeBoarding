{
  "description": "The CodeBoarding project is structured around a core AI Interpretation Layer that orchestrates the analysis of source code to generate architectural insights and documentation. User interactions, whether through a local application, VS Code extension, or GitHub Actions, are managed by the User Interface / API Gateway, which initiates and monitors analysis jobs. These jobs are persisted and managed by the Job Management & Persistence component. The AI Interpretation Layer relies on the Code Repository Access for fetching code and diffs, and the Static Analysis Engine for detailed code structure analysis. Finally, the Output Generation Engine transforms the AI-derived insights into various documentation and diagram formats, which are then presented back to the user via the User Interface / API Gateway.",
  "components": [
    {
      "name": "User Interface / API Gateway",
      "description": "The external-facing layer for users and integrations (VS Code, GitHub Actions, local CLI) to interact with the system. It initiates analysis jobs and retrieves results.",
      "referenced_source_code": [
        {
          "qualified_name": "local_app",
          "reference_file": "local_app.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "vscode_constants.py",
        "vscode_runnable.py",
        "local_app.py",
        "github_action.py"
      ],
      "can_expand": true
    },
    {
      "name": "Job Management & Persistence",
      "description": "Manages the lifecycle and state of all analysis jobs, storing job metadata, progress, and final results in a persistent database.",
      "referenced_source_code": [
        {
          "qualified_name": "duckdb_crud",
          "reference_file": "duckdb_crud.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "duckdb_crud.py"
      ],
      "can_expand": false
    },
    {
      "name": "Code Repository Access",
      "description": "Provides an interface for interacting with source code repositories, including cloning, fetching updates, and generating code differences.",
      "referenced_source_code": [
        {
          "qualified_name": "repo_utils.git_diff",
          "reference_file": "repo_utils/git_diff.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "repo_utils/__init__.py",
        "repo_utils/git_diff.py",
        "repo_utils/errors.py"
      ],
      "can_expand": false
    },
    {
      "name": "Static Analysis Engine",
      "description": "Performs deep structural analysis of source code using Language Server Protocol (LSP) clients to extract symbols, call graphs, class hierarchies, and dependencies.",
      "referenced_source_code": [
        {
          "qualified_name": "static_analyzer.scanner",
          "reference_file": "static_analyzer/scanner.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "static_analyzer/programming_language.py",
        "static_analyzer/__init__.py",
        "static_analyzer/reference_resolve_mixin.py",
        "static_analyzer/graph.py",
        "static_analyzer/analysis_result.py",
        "static_analyzer/scanner.py",
        "static_analyzer/typescript_config_scanner.py",
        "static_analyzer/lsp_client/__init__.py",
        "static_analyzer/lsp_client/typescript_client.py",
        "static_analyzer/lsp_client/client.py"
      ],
      "can_expand": true
    },
    {
      "name": "AI Interpretation Layer",
      "description": "The core intelligence layer, managing interactions with Large Language Models (LLMs) through a framework of specialized agents. It orchestrates the flow of information between static analysis and LLM interpretation to generate architectural insights, detailed analysis, validation, and diff analysis.",
      "referenced_source_code": [
        {
          "qualified_name": "agents.abstraction_agent.AbstractionAgent",
          "reference_file": "agents/abstraction_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "agents/__init__.py",
        "agents/diff_analyzer.py",
        "agents/details_agent.py",
        "agents/validator_agent.py",
        "agents/abstraction_agent.py",
        "agents/planner_agent.py",
        "agents/meta_agent.py",
        "agents/agent_responses.py",
        "agents/agent.py",
        "agents/tools/read_source.py",
        "agents/tools/read_file_structure.py",
        "agents/tools/__init__.py",
        "agents/tools/external_deps.py",
        "agents/tools/read_packages.py",
        "agents/tools/read_cfg.py",
        "agents/tools/get_method_invocations.py",
        "agents/tools/read_git_diff.py",
        "agents/tools/read_file.py",
        "agents/tools/utils.py",
        "agents/tools/read_structure.py",
        "agents/tools/read_docs.py",
        "agents/prompts/__init__.py",
        "agents/prompts/claude_prompts_bidirectional.py",
        "agents/prompts/gpt_prompts_unidirectional.py",
        "agents/prompts/gemini_flash_prompts_bidirectional.py",
        "agents/prompts/abstract_prompt_factory.py",
        "agents/prompts/gpt_prompts_bidirectional.py",
        "agents/prompts/prompt_factory.py",
        "agents/prompts/gemini_flash_prompts_unidirectional.py",
        "agents/prompts/claude_prompts_unidirectional.py"
      ],
      "can_expand": true
    },
    {
      "name": "Output Generation Engine",
      "description": "Transforms the structured architectural insights into a format suitable for various diagramming libraries and tools, and renders them into human-readable and machine-consumable documentation formats.",
      "referenced_source_code": [
        {
          "qualified_name": "diagram_analysis.diagram_generator",
          "reference_file": "diagram_analysis/diagram_generator.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "output_generators/__init__.py",
        "output_generators/sphinx.py",
        "output_generators/mdx.py",
        "output_generators/html.py",
        "output_generators/html_template.py",
        "output_generators/markdown.py",
        "diagram_analysis/__init__.py",
        "diagram_analysis/analysis_json.py",
        "diagram_analysis/diagram_generator.py",
        "diagram_analysis/version.py"
      ],
      "can_expand": true
    },
    {
      "name": "Unclassified",
      "description": "Component for all unclassified files and utility functions (Utility functions/External Libraries/Dependencies)",
      "referenced_source_code": [],
      "assigned_files": [
        "utils.py",
        "setup.py",
        "demo.py",
        "logging_config.py"
      ],
      "can_expand": false
    }
  ],
  "components_relations": [
    {
      "relation": "initiates & manages jobs",
      "src_name": "User Interface / API Gateway",
      "dst_name": "Job Management & Persistence"
    },
    {
      "relation": "triggers repository operations",
      "src_name": "User Interface / API Gateway",
      "dst_name": "Code Repository Access"
    },
    {
      "relation": "provides job status",
      "src_name": "Job Management & Persistence",
      "dst_name": "User Interface / API Gateway"
    },
    {
      "relation": "provides source code",
      "src_name": "Code Repository Access",
      "dst_name": "Static Analysis Engine"
    },
    {
      "relation": "provides code diffs",
      "src_name": "Code Repository Access",
      "dst_name": "AI Interpretation Layer"
    },
    {
      "relation": "outputs static analysis data",
      "src_name": "Static Analysis Engine",
      "dst_name": "AI Interpretation Layer"
    },
    {
      "relation": "requests file content",
      "src_name": "AI Interpretation Layer",
      "dst_name": "Code Repository Access"
    },
    {
      "relation": "requests code details",
      "src_name": "AI Interpretation Layer",
      "dst_name": "Static Analysis Engine"
    },
    {
      "relation": "stores analysis results",
      "src_name": "AI Interpretation Layer",
      "dst_name": "Job Management & Persistence"
    },
    {
      "relation": "sends architectural insights",
      "src_name": "AI Interpretation Layer",
      "dst_name": "Output Generation Engine"
    },
    {
      "relation": "provides diagram data & documentation",
      "src_name": "Output Generation Engine",
      "dst_name": "User Interface / API Gateway"
    }
  ]
}
