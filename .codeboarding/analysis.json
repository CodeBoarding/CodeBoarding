{
  "description": "The system is structured around a core `AI Interpretation Layer` that orchestrates code analysis. User interactions, managed by the `User Interface / API Gateway`, initiate jobs whose states are persistently tracked by `Job Management & Persistence`. Source code is acquired and managed by `Code Repository Access`, providing raw code and diffs to both the `Static Analysis Engine` for structural analysis and directly to the `AI Interpretation Layer`. The `AI Interpretation Layer` synthesizes information from static analysis and code changes, leveraging LLMs to generate architectural insights. These insights are then transformed into diagrams and documentation by the `Output Generation Engine` before being presented back to the user via the `User Interface / API Gateway`. This modular design ensures clear separation of concerns, facilitating maintainability and scalability.",
  "components": [
    {
      "name": "User Interface / API Gateway",
      "description": "The primary entry point for users and external systems, orchestrating job creation and providing analysis results.",
      "referenced_source_code": [
        {
          "qualified_name": "UserInterfaceAPI",
          "reference_file": "",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "local_app.py",
        "github_action.py"
      ],
      "can_expand": true
    },
    {
      "name": "Job Management & Persistence",
      "description": "Manages the state and history of all analysis tasks, ensuring persistence of job data.",
      "referenced_source_code": [
        {
          "qualified_name": "JobManager",
          "reference_file": "",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "duckdb_crud.py"
      ],
      "can_expand": true
    },
    {
      "name": "Code Repository Access",
      "description": "Responsible for fetching and managing source code from repositories, including generating code diffs.",
      "referenced_source_code": [
        {
          "qualified_name": "CodeRepository",
          "reference_file": "<file_path>",
          "reference_start_line": 1,
          "reference_end_line": 10
        }
      ],
      "assigned_files": [
        "repo_utils/__init__.py",
        "repo_utils/git_diff.py"
      ],
      "can_expand": false
    },
    {
      "name": "Static Analysis Engine",
      "description": "Performs structural analysis of source code and provides findings to the AI Interpretation Layer.",
      "referenced_source_code": [
        {
          "qualified_name": "StaticAnalyzer",
          "reference_file": "static_analyzer/__init__.py",
          "reference_start_line": 44,
          "reference_end_line": 67
        }
      ],
      "assigned_files": [
        "static_analyzer/programming_language.py",
        "static_analyzer/__init__.py",
        "static_analyzer/reference_resolve_mixin.py",
        "static_analyzer/graph.py",
        "static_analyzer/analysis_result.py",
        "static_analyzer/scanner.py",
        "static_analyzer/typescript_config_scanner.py",
        "static_analyzer/lsp_client/__init__.py",
        "static_analyzer/lsp_client/typescript_client.py",
        "static_analyzer/lsp_client/client.py"
      ],
      "can_expand": true
    },
    {
      "name": "AI Interpretation Layer",
      "description": "The core intelligence component, leveraging static analysis data and code diffs to generate architectural insights using LLM agents.",
      "referenced_source_code": [
        {
          "qualified_name": "AIInterpreter",
          "reference_file": "No files were provided to choose from. Please provide a list of files to search within.",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "agents/__init__.py",
        "agents/diff_analyzer.py",
        "agents/details_agent.py",
        "agents/validator_agent.py",
        "agents/abstraction_agent.py",
        "agents/planner_agent.py",
        "agents/meta_agent.py",
        "agents/agent_responses.py",
        "agents/agent.py",
        "agents/tools/read_source.py",
        "agents/tools/read_file_structure.py",
        "agents/tools/__init__.py",
        "agents/tools/external_deps.py",
        "agents/tools/read_packages.py",
        "agents/tools/read_cfg.py",
        "agents/tools/get_method_invocations.py",
        "agents/tools/read_git_diff.py",
        "agents/tools/read_file.py",
        "agents/tools/utils.py",
        "agents/tools/read_structure.py",
        "agents/tools/read_docs.py",
        "agents/prompts/__init__.py",
        "agents/prompts/claude_prompts_bidirectional.py",
        "agents/prompts/gpt_prompts_unidirectional.py",
        "agents/prompts/gemini_flash_prompts_bidirectional.py",
        "agents/prompts/abstract_prompt_factory.py",
        "agents/prompts/gpt_prompts_bidirectional.py",
        "agents/prompts/prompt_factory.py",
        "agents/prompts/gemini_flash_prompts_unidirectional.py",
        "agents/prompts/claude_prompts_unidirectional.py"
      ],
      "can_expand": true
    },
    {
      "name": "Output Generation Engine",
      "description": "Transforms architectural insights into consumable documentation and diagrams.",
      "referenced_source_code": [
        {
          "qualified_name": "OutputGenerator",
          "reference_file": "OutputGenerator",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "output_generators/__init__.py",
        "output_generators/sphinx.py",
        "output_generators/mdx.py",
        "output_generators/html.py",
        "output_generators/html_template.py",
        "output_generators/markdown.py",
        "diagram_analysis/__init__.py",
        "diagram_analysis/analysis_json.py",
        "diagram_analysis/diagram_generator.py"
      ],
      "can_expand": true
    },
    {
      "name": "Unclassified",
      "description": "Component for all unclassified files and utility functions (Utility functions/External Libraries/Dependencies)",
      "referenced_source_code": [],
      "assigned_files": [
        "vscode_constants.py",
        "vscode_runnable.py",
        "utils.py",
        "setup.py",
        "demo.py",
        "logging_config.py",
        "repo_utils/errors.py",
        "diagram_analysis/version.py"
      ],
      "can_expand": false
    },
    {
      "name": "Unclassified",
      "description": "Component for all unclassified files and utility functions (Utility functions/External Libraries/Dependencies)",
      "referenced_source_code": [],
      "assigned_files": [],
      "can_expand": false
    }
  ],
  "components_relations": [
    {
      "relation": "initiates & manages jobs",
      "src_name": "User Interface / API Gateway",
      "dst_name": "Job Management & Persistence"
    },
    {
      "relation": "triggers repository operations",
      "src_name": "User Interface / API Gateway",
      "dst_name": "Code Repository Access"
    },
    {
      "relation": "provides job status",
      "src_name": "Job Management & Persistence",
      "dst_name": "User Interface / API Gateway"
    },
    {
      "relation": "provides source code",
      "src_name": "Code Repository Access",
      "dst_name": "Static Analysis Engine"
    },
    {
      "relation": "provides code diffs",
      "src_name": "Code Repository Access",
      "dst_name": "AI Interpretation Layer"
    },
    {
      "relation": "outputs static analysis data",
      "src_name": "Static Analysis Engine",
      "dst_name": "AI Interpretation Layer"
    },
    {
      "relation": "requests file content",
      "src_name": "AI Interpretation Layer",
      "dst_name": "Code Repository Access"
    },
    {
      "relation": "requests code details",
      "src_name": "AI Interpretation Layer",
      "dst_name": "Static Analysis Engine"
    },
    {
      "relation": "stores analysis results",
      "src_name": "AI Interpretation Layer",
      "dst_name": "Job Management & Persistence"
    },
    {
      "relation": "sends architectural insights",
      "src_name": "AI Interpretation Layer",
      "dst_name": "Output Generation Engine"
    },
    {
      "relation": "provides diagram data & documentation",
      "src_name": "Output Generation Engine",
      "dst_name": "User Interface / API Gateway"
    }
  ]
}
