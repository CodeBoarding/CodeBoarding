{
  "description": "The CodeBoarding system orchestrates the automated generation of software documentation. The `API Service` acts as the entry point, receiving user requests for documentation jobs. These jobs are then managed by the `Orchestration Engine`, which persists job states in the `Job Database`. The `Orchestration Engine` initiates the core analysis process by first interacting with the `Repository Manager` to retrieve the necessary source code. This code is then passed to the `Static Analysis Engine`, which performs deep, language-specific analysis, now including comprehensive TypeScript configuration scanning for deeper analysis of TypeScript projects. The rich analysis results from the `Static Analysis Engine` are fed into the `AI Interpretation Layer`. This layer, comprising various specialized AI agents and an enhanced prompt management system, interprets the static analysis data, generates high-level architectural insights, and performs diff analysis by querying the `Repository Manager` for version differences. Finally, these enhanced insights are passed to the `Output Generation Engine`, which transforms them into various documentation formats and integrates with external systems like GitHub Actions, delivering the final documentation back to the `API Service`.",
  "components": [
    {
      "name": "API Service",
      "description": "The external interface for CodeBoarding, handling user requests, job initiation, status retrieval, and integrating with GitHub Actions for automated documentation generation.",
      "referenced_source_code": [
        {
          "qualified_name": "local_app",
          "reference_file": "local_app.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "local_app.py"
      ],
      "can_expand": true
    },
    {
      "name": "Job Database",
      "description": "Persistent storage for managing the lifecycle, status, and results of all documentation generation jobs.",
      "referenced_source_code": [
        {
          "qualified_name": "duckdb_crud",
          "reference_file": "duckdb_crud.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "duckdb_crud.py"
      ],
      "can_expand": false
    },
    {
      "name": "Orchestration Engine",
      "description": "The central control unit that manages the entire documentation generation pipeline, coordinating all analysis and generation stages.",
      "referenced_source_code": [
        {
          "qualified_name": "diagram_generator",
          "reference_file": "diagram_analysis/diagram_generator.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "diagram_analysis/__init__.py",
        "diagram_analysis/analysis_json.py",
        "diagram_analysis/diagram_generator.py",
        "diagram_analysis/version.py"
      ],
      "can_expand": true
    },
    {
      "name": "Repository Manager",
      "description": "Manages all interactions with source code repositories, including cloning, fetching, and extracting version differences.",
      "referenced_source_code": [
        {
          "qualified_name": "__init__",
          "reference_file": "agents/diff_analyzer.py",
          "reference_start_line": 21,
          "reference_end_line": 32
        },
        {
          "qualified_name": "git_diff",
          "reference_file": "repo_utils/git_diff.py",
          "reference_start_line": 27,
          "reference_end_line": 76
        }
      ],
      "assigned_files": [
        "repo_utils/__init__.py",
        "repo_utils/git_diff.py",
        "repo_utils/errors.py"
      ],
      "can_expand": true
    },
    {
      "name": "Static Analysis Engine",
      "description": "Performs deep, language-specific analysis of source code, now explicitly including **reference resolution capabilities**, **enhanced integration with the VS Code environment**, and **comprehensive TypeScript configuration scanning** for deeper analysis of TypeScript projects. It potentially leverages VS Code-specific settings or protocols.",
      "referenced_source_code": [
        {
          "qualified_name": "scanner",
          "reference_file": "static_analyzer/scanner.py",
          "reference_start_line": 13,
          "reference_end_line": 82
        },
        {
          "qualified_name": "client",
          "reference_file": "static_analyzer/lsp_client/typescript_client.py",
          "reference_start_line": 10,
          "reference_end_line": 214
        },
        {
          "qualified_name": "analysis_result",
          "reference_file": "agents/abstraction_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "reference_resolve_mixin",
          "reference_file": "static_analyzer/reference_resolve_mixin.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "vscode_constants",
          "reference_file": "vscode_constants.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "typescript_config_scanner",
          "reference_file": "static_analyzer/typescript_config_scanner.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "vscode_constants.py",
        "vscode_runnable.py",
        "static_analyzer/programming_language.py",
        "static_analyzer/__init__.py",
        "static_analyzer/reference_resolve_mixin.py",
        "static_analyzer/graph.py",
        "static_analyzer/analysis_result.py",
        "static_analyzer/scanner.py",
        "static_analyzer/typescript_config_scanner.py",
        "static_analyzer/lsp_client/__init__.py",
        "static_analyzer/lsp_client/typescript_client.py",
        "static_analyzer/lsp_client/client.py"
      ],
      "can_expand": true
    },
    {
      "name": "AI Interpretation Layer",
      "description": "A collection of specialized AI agents that perform sophisticated interpretation of static analysis data, generating enhanced high-level architectural insights, including detailed abstractions, refined planning, robust validation, and comprehensive diff analysis. This layer now features a **significantly enhanced prompt management system**, utilizing an `abstract_prompt_factory` and concrete implementations (e.g., `gemini_flash_prompts_bidirectional`, `gemini_flash_prompts_unidirectional`) for structured prompt definition, selection, and application, supporting various language models (e.g., Gemini Flash) and prompting strategies. The `prompt_factory` has been refactored to integrate this modular and extensible system.",
      "referenced_source_code": [
        {
          "qualified_name": "meta_agent",
          "reference_file": "diagram_analysis/diagram_generator.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "abstraction_agent",
          "reference_file": "agents/abstraction_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "details_agent",
          "reference_file": "agents/details_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "planner_agent",
          "reference_file": "diagram_analysis/diagram_generator.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "validator_agent",
          "reference_file": "diagram_analysis/diagram_generator.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "diff_analyzer",
          "reference_file": "agents/diff_analyzer.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "agent",
          "reference_file": "agents/agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "agent_responses",
          "reference_file": "agents/agent_responses.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "prompts",
          "reference_file": "agents/details_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "abstract_prompt_factory",
          "reference_file": "agents/prompts/abstract_prompt_factory.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "gemini_flash_prompts_bidirectional",
          "reference_file": "agents/prompts/gemini_flash_prompts_bidirectional.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "gemini_flash_prompts_unidirectional",
          "reference_file": "agents/prompts/gemini_flash_prompts_unidirectional.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "prompt_factory",
          "reference_file": "agents/prompts/prompt_factory.py",
          "reference_start_line": 37,
          "reference_end_line": 46
        }
      ],
      "assigned_files": [
        "agents/__init__.py",
        "agents/diff_analyzer.py",
        "agents/details_agent.py",
        "agents/validator_agent.py",
        "agents/abstraction_agent.py",
        "agents/planner_agent.py",
        "agents/meta_agent.py",
        "agents/agent_responses.py",
        "agents/agent.py",
        "agents/tools/read_source.py",
        "agents/tools/read_file_structure.py",
        "agents/tools/__init__.py",
        "agents/tools/external_deps.py",
        "agents/tools/read_packages.py",
        "agents/tools/read_cfg.py",
        "agents/tools/get_method_invocations.py",
        "/home/ubuntu/CodeBoarding/repo/CodeBoarding/agents/tools/read_git_diff.y",
        "agents/tools/read_file.py",
        "agents/tools/utils.py",
        "agents/tools/read_structure.py",
        "agents/tools/read_docs.py",
        "agents/prompts/__init__.py",
        "agents/prompts/gemini_flash_prompts_bidirectional.py",
        "agents/prompts/abstract_prompt_factory.py",
        "agents/prompts/prompt_factory.py",
        "agents/prompts/gemini_flash_prompts_unidirectional.py"
      ],
      "can_expand": true
    },
    {
      "name": "Output Generation Engine",
      "description": "Transforms the final, validated architectural insights into various human-readable and diagram-friendly documentation formats, with enhanced capabilities for specific output formats and external integrations like GitHub Actions.",
      "referenced_source_code": [
        {
          "qualified_name": "html",
          "reference_file": "github_action.py",
          "reference_start_line": 37,
          "reference_end_line": 51
        },
        {
          "qualified_name": "markdown",
          "reference_file": "github_action.py",
          "reference_start_line": 20,
          "reference_end_line": 34
        },
        {
          "qualified_name": "mdx",
          "reference_file": "github_action.py",
          "reference_start_line": 54,
          "reference_end_line": 68
        },
        {
          "qualified_name": "sphinx",
          "reference_file": "output_generators/sphinx.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "github_action",
          "reference_file": "github_action.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "github_action.py",
        "output_generators/__init__.py",
        "output_generators/sphinx.py",
        "output_generators/mdx.py",
        "output_generators/html.py",
        "output_generators/html_template.py",
        "output_generators/markdown.py"
      ],
      "can_expand": true
    },
    {
      "name": "Unclassified",
      "description": "Component for all unclassified files and utility functions (Utility functions/External Libraries/Dependencies)",
      "referenced_source_code": [],
      "assigned_files": [
        "utils.py",
        "setup.py",
        "demo.py",
        "logging_config.py"
      ],
      "can_expand": false
    }
  ],
  "components_relations": [
    {
      "relation": "initiates jobs and triggers analysis within",
      "src_name": "API Service",
      "dst_name": "Orchestration Engine"
    },
    {
      "relation": "requests GitHub Action jobs from",
      "src_name": "API Service",
      "dst_name": "Orchestration Engine"
    },
    {
      "relation": "manages job state in",
      "src_name": "Orchestration Engine",
      "dst_name": "Job Database"
    },
    {
      "relation": "requests code from",
      "src_name": "Orchestration Engine",
      "dst_name": "Repository Manager"
    },
    {
      "relation": "provides code to",
      "src_name": "Repository Manager",
      "dst_name": "Orchestration Engine"
    },
    {
      "relation": "requests static analysis from",
      "src_name": "Orchestration Engine",
      "dst_name": "Static Analysis Engine"
    },
    {
      "relation": "provides richer analysis results to",
      "src_name": "Static Analysis Engine",
      "dst_name": "Orchestration Engine"
    },
    {
      "relation": "feeds rich analysis data to",
      "src_name": "Orchestration Engine",
      "dst_name": "AI Interpretation Layer"
    },
    {
      "relation": "returns enhanced architectural insights to",
      "src_name": "AI Interpretation Layer",
      "dst_name": "Orchestration Engine"
    },
    {
      "relation": "queries diff information from",
      "src_name": "AI Interpretation Layer",
      "dst_name": "Repository Manager"
    },
    {
      "relation": "passes enhanced insights for generation to",
      "src_name": "Orchestration Engine",
      "dst_name": "Output Generation Engine"
    },
    {
      "relation": "delivers documentation to",
      "src_name": "Output Generation Engine",
      "dst_name": "API Service"
    },
    {
      "relation": "provides GitHub Action output to",
      "src_name": "Output Generation Engine",
      "dst_name": "API Service"
    }
  ]
}
