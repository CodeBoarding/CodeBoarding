{
  "description": "One paragraph explaining the functionality which is represented by this graph. What the main flow is and what is its purpose.",
  "components": [
    {
      "name": "Orchestration & Workflow",
      "description": "The central coordinator that manages the end-to-end analysis pipeline. It initiates static analysis, triggers the AI engine, coordinates with the persistence layer for caching and differential checks, and sends the final, validated results to the output generator.",
      "referenced_source_code": [
        {
          "qualified_name": "local_app.py",
          "reference_file": "/Users/imilev/StartUp/CodeBoarding/repos/CodeBoarding/local_app.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "github_action.py",
          "reference_file": "/Users/imilev/StartUp/CodeBoarding/repos/CodeBoarding/github_action.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "can_expand": true
    },
    {
      "name": "Static Code Analyzer",
      "description": "Responsible for the initial, non-AI parsing of the source code. It uses AST-based techniques to build foundational data structures like call graphs and structure graphs, transforming raw code into a structured format that the AI engine can interpret.",
      "referenced_source_code": [
        {
          "qualified_name": "static_analyzer/pylint_analyze/call_graph_builder.py",
          "reference_file": "/Users/imilev/StartUp/CodeBoarding/repos/CodeBoarding/static_analyzer/pylint_analyze/call_graph_builder.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "static_analyzer/pylint_analyze/structure_graph_builder.py",
          "reference_file": "/Users/imilev/StartUp/CodeBoarding/repos/CodeBoarding/static_analyzer/pylint_analyze/structure_graph_builder.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "static_analyzer/pylint_graph_transform.py",
          "reference_file": "/Users/imilev/StartUp/CodeBoarding/repos/CodeBoarding/static_analyzer/pylint_graph_transform.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "can_expand": true
    },
    {
      "name": "AI Analysis Engine",
      "description": "The cognitive core of the system. It is a multi-agent framework that interprets the data from the static analyzer. It uses a collection of specialized agents (e.g., Planner, Abstraction, Diff Analyzer) to collaboratively identify architectural patterns, understand component roles, and build a comprehensive model of the codebase.",
      "referenced_source_code": [
        {
          "qualified_name": "agents/agent.py",
          "reference_file": "/Users/imilev/StartUp/CodeBoarding/repos/CodeBoarding/agents/agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "agents/planner_agent.py",
          "reference_file": "/Users/imilev/StartUp/CodeBoarding/repos/CodeBoarding/agents/planner_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "agents/abstraction_agent.py",
          "reference_file": "/Users/imilev/StartUp/CodeBoarding/repos/CodeBoarding/agents/abstraction_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "agents/diff_analyzer.py",
          "reference_file": "/Users/imilev/StartUp/CodeBoarding/repos/CodeBoarding/agents/diff_analyzer.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "can_expand": true
    },
    {
      "name": "Analysis Persistence",
      "description": "Handles the serialization and deserialization of the analysis model to a storable format (JSON). This enables the caching of results, which is critical for performance and for supporting efficient incremental analysis by providing a baseline for comparison.",
      "referenced_source_code": [
        {
          "qualified_name": "diagram_analysis/analysis_json.py",
          "reference_file": "/Users/imilev/StartUp/CodeBoarding/repos/CodeBoarding/diagram_analysis/analysis_json.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "can_expand": false
    },
    {
      "name": "Output Generator",
      "description": "The final stage in the pipeline. It consumes the rich, structured analysis model produced by the AI Engine and renders it into various human-readable formats, such as Markdown, HTML, and Sphinx documentation. This decouples the core analysis logic from its presentation.",
      "referenced_source_code": [
        {
          "qualified_name": "output_generators/markdown.py",
          "reference_file": "/Users/imilev/StartUp/CodeBoarding/repos/CodeBoarding/output_generators/markdown.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "output_generators/html.py",
          "reference_file": "/Users/imilev/StartUp/CodeBoarding/repos/CodeBoarding/output_generators/html.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "output_generators/sphinx.py",
          "reference_file": "/Users/imilev/StartUp/CodeBoarding/repos/CodeBoarding/output_generators/sphinx.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "can_expand": false
    }
  ],
  "components_relations": [
    {
      "relation": "invokes analysis on",
      "src_name": "Orchestration & Workflow",
      "dst_name": "Static Code Analyzer"
    },
    {
      "relation": "returns raw graph data to",
      "src_name": "Static Code Analyzer",
      "dst_name": "Orchestration & Workflow"
    },
    {
      "relation": "consults and saves analysis to",
      "src_name": "Orchestration & Workflow",
      "dst_name": "Analysis Persistence"
    },
    {
      "relation": "provides cached analysis to",
      "src_name": "Analysis Persistence",
      "dst_name": "Orchestration & Workflow"
    },
    {
      "relation": "invokes with graph data",
      "src_name": "Orchestration & Workflow",
      "dst_name": "AI Analysis Engine"
    },
    {
      "relation": "returns high-level model to",
      "src_name": "AI Analysis Engine",
      "dst_name": "Orchestration & Workflow"
    },
    {
      "relation": "sends model for rendering to",
      "src_name": "Orchestration & Workflow",
      "dst_name": "Output Generator"
    }
  ]
}