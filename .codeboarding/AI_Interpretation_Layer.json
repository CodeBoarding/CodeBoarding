{
  "description": "The system is structured around a Retrieval Augmented Generation (RAG) pattern, orchestrated by the `Application Orchestrator`. This orchestrator directs the `QueryProcessor` to handle incoming user queries, which are then processed and used by the `DocumentRetriever` to fetch relevant information from the `VectorStore`. A central `PromptFactory` provides standardized and optimized prompts for various language models, including Gemini Flash, Claude, and now GPT, which are utilized by both the `Application Orchestrator` and the `ResponseGenerator`. The `ResponseGenerator` synthesizes the retrieved documents and generated prompts to formulate the final user response. Complementing this core RAG flow, a `Static Analyzer` operates independently, offering specialized analysis capabilities, particularly for TypeScript configurations.",
  "components": [
    {
      "name": "Application Orchestrator",
      "description": "Manages the overall application flow, coordinating interactions between QueryProcessor, DocumentRetriever, ResponseGenerator, and leveraging the PromptFactory for agent prompt generation. It receives user queries and delivers final responses, adapting its agent coordination mechanisms due to recent core agent logic refactoring and the new prompt management system.",
      "referenced_source_code": [
        {
          "qualified_name": "agents.agent",
          "reference_file": "agents/agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "../../agents/__init__.py",
        "../../agents/diff_analyzer.py",
        "../../agents/details_agent.py",
        "../../agents/validator_agent.py",
        "../../agents/abstraction_agent.py",
        "../../agents/planner_agent.py",
        "../../agents/meta_agent.py",
        "../../agents/agent_responses.py",
        "../../agents/agent.py",
        "../../agents/tools/read_source.py",
        "../../agents/tools/read_file_structure.py",
        "../../agents/tools/__init__.py",
        "../../agents/tools/external_deps.py",
        "../../agents/tools/read_packages.py",
        "../../agents/tools/read_cfg.py",
        "../../agents/tools/get_method_invocations.py",
        "../../agents/tools/read_git_diff.py",
        "../../agents/tools/read_file.py",
        "../../agents/tools/utils.py",
        "../../agents/tools/read_structure.py",
        "../../agents/tools/read_docs.py"
      ],
      "can_expand": true
    },
    {
      "name": "QueryProcessor",
      "description": "Handles incoming user queries, embeds them, and prepares them for similarity search, potentially utilizing refined prompts from the PromptFactory for enhanced query understanding.",
      "referenced_source_code": [
        {
          "qualified_name": "langchain_core.embeddings.Embeddings:embed_query",
          "reference_file": ".",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [],
      "can_expand": true
    },
    {
      "name": "VectorStore",
      "description": "Stores and retrieves document embeddings based on similarity search.",
      "referenced_source_code": [
        {
          "qualified_name": "langchain_community.vectorstores.chroma.Chroma:similarity_search",
          "reference_file": "langchain_community.vectorstores.chroma.Chroma:similarity_search",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [],
      "can_expand": true
    },
    {
      "name": "DocumentRetriever",
      "description": "Retrieves relevant documents from the vector store.",
      "referenced_source_code": [
        {
          "qualified_name": "langchain_core.retrievers.BaseRetriever:get_relevant_documents",
          "reference_file": ".",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [],
      "can_expand": false
    },
    {
      "name": "ResponseGenerator",
      "description": "Generates a natural language response using a large language model based on the query and retrieved documents, now significantly enhanced by leveraging structured prompts from the PromptFactory, including specialized prompts for models like Gemini Flash, Claude, and GPT.",
      "referenced_source_code": [
        {
          "qualified_name": "langchain_core.language_models.llms.BaseLLM:invoke",
          "reference_file": ".",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [],
      "can_expand": true
    },
    {
      "name": "PromptFactory",
      "description": "Centralizes the creation and management of prompts for various agents and language models through an abstract factory pattern. It provides a structured and standardized approach to prompt generation, leveraging an AbstractPromptFactory interface and specialized implementations like GeminiFlashPromptsBidirectional, GeminiFlashPromptsUnidirectional, ClaudePromptsBidirectional, ClaudePromptsUnidirectional, GPTPromptsBidirectional, and GPTPromptsUnidirectional. This ensures consistent and optimized interactions with LLMs, notably for Gemini Flash, Claude, and GPT models, by managing an expanded library of prompts.",
      "referenced_source_code": [
        {
          "qualified_name": "prompt_factory.PromptFactory",
          "reference_file": "agents/prompts/prompt_factory.py",
          "reference_start_line": 32,
          "reference_end_line": 108
        }
      ],
      "assigned_files": [
        "agents/prompts/__init__.py",
        "agents/prompts/claude_prompts_bidirectional.py",
        "agents/prompts/gpt_prompts_unidirectional.py",
        "agents/prompts/gemini_flash_prompts_bidirectional.py",
        "agents/prompts/abstract_prompt_factory.py",
        "agents/prompts/gpt_prompts_bidirectional.py",
        "agents/prompts/prompt_factory.py",
        "agents/prompts/gemini_flash_prompts_unidirectional.py",
        "agents/prompts/claude_prompts_unidirectional.py"
      ],
      "can_expand": true
    },
    {
      "name": "Static Analyzer",
      "description": "An independent functional area responsible for performing static analysis, primarily focusing on TypeScript configurations. This component has been significantly enhanced with the integration of a dedicated Language Server Protocol (LSP) client for TypeScript, enabling more sophisticated and in-depth analysis by leveraging the full capabilities of a TypeScript Language Server. It now also incorporates graph-based analysis capabilities to provide deeper insights. It operates in parallel to the core RAG system, providing distinct capabilities without directly altering the RAG data flow.",
      "referenced_source_code": [
        {
          "qualified_name": "static_analyzer.typescript_config_scanner",
          "reference_file": "static_analyzer/typescript_config_scanner.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "static_analyzer.lsp_client.typescript_client",
          "reference_file": "static_analyzer/lsp_client/typescript_client.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "static_analyzer.graph",
          "reference_file": "static_analyzer/graph.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [],
      "can_expand": true
    },
    {
      "name": "Unclassified",
      "description": "Component for all unclassified files and utility functions (Utility functions/External Libraries/Dependencies)",
      "referenced_source_code": [],
      "assigned_files": [],
      "can_expand": false
    }
  ],
  "components_relations": [
    {
      "relation": "initiates",
      "src_name": "Application Orchestrator",
      "dst_name": "QueryProcessor"
    },
    {
      "relation": "requests retrieval from",
      "src_name": "Application Orchestrator",
      "dst_name": "DocumentRetriever"
    },
    {
      "relation": "sends context to",
      "src_name": "Application Orchestrator",
      "dst_name": "ResponseGenerator"
    },
    {
      "relation": "requests prompts from",
      "src_name": "Application Orchestrator",
      "dst_name": "PromptFactory"
    },
    {
      "relation": "prepares query for",
      "src_name": "QueryProcessor",
      "dst_name": "VectorStore"
    },
    {
      "relation": "stores embeddings for",
      "src_name": "VectorStore",
      "dst_name": "QueryProcessor"
    },
    {
      "relation": "provides documents to",
      "src_name": "VectorStore",
      "dst_name": "DocumentRetriever"
    },
    {
      "relation": "queries",
      "src_name": "DocumentRetriever",
      "dst_name": "VectorStore"
    },
    {
      "relation": "provides documents to",
      "src_name": "DocumentRetriever",
      "dst_name": "Application Orchestrator"
    },
    {
      "relation": "utilizes prompts from",
      "src_name": "ResponseGenerator",
      "dst_name": "PromptFactory"
    },
    {
      "relation": "returns response to",
      "src_name": "ResponseGenerator",
      "dst_name": "Application Orchestrator"
    },
    {
      "relation": "provides prompts to",
      "src_name": "PromptFactory",
      "dst_name": "Application Orchestrator"
    },
    {
      "relation": "provides prompts to",
      "src_name": "PromptFactory",
      "dst_name": "ResponseGenerator"
    },
    {
      "relation": "operates independently of",
      "src_name": "Static Analyzer",
      "dst_name": "Application Orchestrator"
    }
  ]
}
