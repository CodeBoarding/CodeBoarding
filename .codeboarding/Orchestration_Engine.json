{
  "description": "The core of the system is the Orchestration Engine, which drives the entire documentation generation process. It begins by engaging the ProjectScanner to gather comprehensive static analysis data from the codebase, now including specialized TypeScript configuration scanning. This collected data is then encapsulated within StaticAnalysisResults, serving as the foundational input for subsequent analysis stages. The Orchestration Engine then orchestrates a series of specialized AI agents (MetaAgent, AbstractionAgent, DetailsAgent, PlannerAgent, ValidatorAgent) to progressively analyze the project, generate architectural abstractions, detail component responsibilities, plan future analysis, and validate the generated documentation, ensuring accuracy and consistency. The system is centered around an Orchestration Engine that manages the entire documentation generation pipeline. It initiates the ProjectScanner to collect static analysis data, including specialized TypeScript configuration scans, which is then stored in StaticAnalysisResults. The Orchestration Engine then coordinates a suite of AI agents—MetaAgent, AbstractionAgent, DetailsAgent, PlannerAgent, and ValidatorAgent—to perform various analysis tasks, generate architectural insights, plan subsequent analysis, and validate the overall output, ensuring a comprehensive and accurate documentation process.",
  "components": [
    {
      "name": "Orchestration Engine",
      "description": "The central control unit that manages the entire documentation generation pipeline, coordinating all analysis and generation stages. It initializes and coordinates AI agents, handles pre-analysis, processes components, determines update needs, applies feedback, and saves results.",
      "referenced_source_code": [
        {
          "qualified_name": "diagram_generator",
          "reference_file": "diagram_analysis/diagram_generator.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "../../diagram_analysis/diagram_generator.py",
        "../../diagram_analysis/analysis_json.py"
      ],
      "can_expand": true
    },
    {
      "name": "MetaAgent",
      "description": "An AI agent responsible for performing initial project metadata analysis, providing foundational context for subsequent analysis stages.",
      "referenced_source_code": [
        {
          "qualified_name": "meta_agent",
          "reference_file": "agents/meta_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "../../agents/meta_agent.py"
      ],
      "can_expand": true
    },
    {
      "name": "AbstractionAgent",
      "description": "An AI agent that generates high-level architectural abstractions from the analyzed code, identifying major components and their relationships.",
      "referenced_source_code": [
        {
          "qualified_name": "abstraction_agent",
          "reference_file": "agents/abstraction_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "../../agents/abstraction_agent.py"
      ],
      "can_expand": true
    },
    {
      "name": "DetailsAgent",
      "description": "An AI agent that provides detailed analysis of individual components, delving into their responsibilities, internal structure, and specific interactions.",
      "referenced_source_code": [
        {
          "qualified_name": "details_agent",
          "reference_file": "agents/details_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "../../agents/details_agent.py"
      ],
      "can_expand": true
    },
    {
      "name": "PlannerAgent",
      "description": "An AI agent that plans the next set of components to analyze, optimizing the analysis workflow based on dependencies and previous results.",
      "referenced_source_code": [
        {
          "qualified_name": "planner_agent",
          "reference_file": "agents/planner_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "../../agents/planner_agent.py"
      ],
      "can_expand": true
    },
    {
      "name": "ValidatorAgent",
      "description": "An AI agent that validates the generated analysis and provides feedback, ensuring accuracy and consistency of the documentation.",
      "referenced_source_code": [
        {
          "qualified_name": "validator_agent",
          "reference_file": "agents/validator_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "../../agents/validator_agent.py"
      ],
      "can_expand": true
    },
    {
      "name": "ProjectScanner",
      "description": "A component responsible for initiating and collecting static analysis data from the codebase, including specialized scanning for TypeScript configurations, serving as the primary input for the analysis pipeline.",
      "referenced_source_code": [
        {
          "qualified_name": "scanner",
          "reference_file": "static_analyzer/scanner.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "typescript_config_scanner",
          "reference_file": "static_analyzer/typescript_config_scanner.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "../../static_analyzer/scanner.py",
        "static_analyzer/typescript_config_scanner.py"
      ],
      "can_expand": true
    },
    {
      "name": "StaticAnalysisResults",
      "description": "A data structure that holds the comprehensive results of static analysis, making this information accessible to the Orchestration Engine and AI agents.",
      "referenced_source_code": [
        {
          "qualified_name": "analysis_result",
          "reference_file": "static_analyzer/analysis_result.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "../../static_analyzer/analysis_result.py"
      ],
      "can_expand": false
    },
    {
      "name": "Unclassified",
      "description": "Component for all unclassified files and utility functions (Utility functions/External Libraries/Dependencies)",
      "referenced_source_code": [],
      "assigned_files": [
        "../../diagram_analysis/__init__.py",
        "../../diagram_analysis/version.py"
      ],
      "can_expand": false
    }
  ],
  "components_relations": [
    {
      "relation": "orchestrates",
      "src_name": "Orchestration Engine",
      "dst_name": "ProjectScanner"
    },
    {
      "relation": "produces",
      "src_name": "ProjectScanner",
      "dst_name": "StaticAnalysisResults"
    },
    {
      "relation": "consumes",
      "src_name": "Orchestration Engine",
      "dst_name": "StaticAnalysisResults"
    },
    {
      "relation": "orchestrates",
      "src_name": "Orchestration Engine",
      "dst_name": "MetaAgent"
    },
    {
      "relation": "exchanges data with",
      "src_name": "Orchestration Engine",
      "dst_name": "MetaAgent"
    },
    {
      "relation": "orchestrates",
      "src_name": "Orchestration Engine",
      "dst_name": "AbstractionAgent"
    },
    {
      "relation": "exchanges data with",
      "src_name": "Orchestration Engine",
      "dst_name": "AbstractionAgent"
    },
    {
      "relation": "orchestrates",
      "src_name": "Orchestration Engine",
      "dst_name": "DetailsAgent"
    },
    {
      "relation": "exchanges data with",
      "src_name": "Orchestration Engine",
      "dst_name": "DetailsAgent"
    },
    {
      "relation": "orchestrates",
      "src_name": "Orchestration Engine",
      "dst_name": "PlannerAgent"
    },
    {
      "relation": "exchanges data with",
      "src_name": "Orchestration Engine",
      "dst_name": "PlannerAgent"
    },
    {
      "relation": "orchestrates",
      "src_name": "Orchestration Engine",
      "dst_name": "ValidatorAgent"
    },
    {
      "relation": "exchanges data with",
      "src_name": "Orchestration Engine",
      "dst_name": "ValidatorAgent"
    }
  ]
}
