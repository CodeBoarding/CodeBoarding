{
  "description": "The system operates around an Orchestration Engine that manages the entire documentation generation pipeline. It initiates the process by leveraging the Project Scanner to gather static analysis data, which is then stored in Static Analysis Results. The Orchestration Engine then coordinates a suite of AI Agents, each with specialized roles, to analyze this data. These agents utilize a sophisticated Prompt Factory to construct dynamic prompts for the LLM, enabling both \"bidirectional\" and \"unidirectional\" communication patterns. Agent responses are processed by the Agent Response Processor before being fed back to the Orchestration Engine for further coordination, feedback application, and final result saving. This architecture emphasizes a modular, agent-based approach with a highly adaptable prompting mechanism for intelligent code analysis and documentation generation.",
  "components": [
    {
      "name": "Orchestration Engine",
      "description": "The central control unit that manages the entire documentation generation pipeline, coordinating all analysis and generation stages. It initializes and coordinates AI agents, handles pre-analysis, processes components, determines update needs, applies feedback, and saves results.",
      "referenced_source_code": [
        {
          "qualified_name": "diagram_generator",
          "reference_file": "diagram_analysis/diagram_generator.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "../../diagram_analysis/__init__.py",
        "../../diagram_analysis/analysis_json.py",
        "../../diagram_analysis/diagram_generator.py"
      ],
      "can_expand": true
    },
    {
      "name": "Project Scanner",
      "description": "A component responsible for initiating and collecting static analysis data from the codebase, including specialized scanning for TypeScript configurations, serving as the primary input for the analysis pipeline.",
      "referenced_source_code": [
        {
          "qualified_name": "scanner",
          "reference_file": "static_analyzer/scanner.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "typescript_config_scanner",
          "reference_file": "static_analyzer/typescript_config_scanner.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [],
      "can_expand": true
    },
    {
      "name": "Static Analysis Results",
      "description": "A data structure that holds the comprehensive results of static analysis, making this information accessible to the Orchestration Engine and AI agents.",
      "referenced_source_code": [
        {
          "qualified_name": "analysis_result",
          "reference_file": "static_analyzer/analysis_result.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [],
      "can_expand": false
    },
    {
      "name": "AI Agents",
      "description": "A collective component representing all specialized AI agents (MetaAgent, AbstractionAgent, DetailsAgent, PlannerAgent, ValidatorAgent) responsible for various stages of code analysis and documentation generation. These agents now incorporate advanced prompting strategies for more complex reasoning.",
      "referenced_source_code": [
        {
          "qualified_name": "meta_agent",
          "reference_file": "agents/meta_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "abstraction_agent",
          "reference_file": "agents/abstraction_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "details_agent",
          "reference_file": "agents/details_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "planner_agent",
          "reference_file": "agents/planner_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "validator_agent",
          "reference_file": "agents/validator_agent.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [],
      "can_expand": true
    },
    {
      "name": "Prompt Factory",
      "description": "Responsible for dynamically constructing and managing prompts for the LLM, supporting both \"bidirectional\" and \"unidirectional\" communication patterns, enabling sophisticated reasoning and interaction strategies for the AI Agents.",
      "referenced_source_code": [
        {
          "qualified_name": "prompt_factory",
          "reference_file": "agents/prompts/prompt_factory.py",
          "reference_start_line": 37,
          "reference_end_line": 53
        },
        {
          "qualified_name": "claude_prompts_bidirectional",
          "reference_file": "agents/prompts/claude_prompts_bidirectional.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "claude_prompts_unidirectional",
          "reference_file": "agents/prompts/claude_prompts_unidirectional.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [],
      "can_expand": true
    },
    {
      "name": "Agent Response Processor",
      "description": "Handles the parsing, validation, and structuring of responses received from the LLM, ensuring that the output is correctly interpreted and formatted for subsequent processing by the Orchestration Engine and other AI Agents.",
      "referenced_source_code": [
        {
          "qualified_name": "agent_responses",
          "reference_file": "agents/agent_responses.py",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [],
      "can_expand": true
    },
    {
      "name": "Unclassified",
      "description": "Component for all unclassified files and utility functions (Utility functions/External Libraries/Dependencies)",
      "referenced_source_code": [],
      "assigned_files": [],
      "can_expand": false
    }
  ],
  "components_relations": [
    {
      "relation": "orchestrates",
      "src_name": "Orchestration Engine",
      "dst_name": "Project Scanner"
    },
    {
      "relation": "produces",
      "src_name": "Project Scanner",
      "dst_name": "Static Analysis Results"
    },
    {
      "relation": "consumes",
      "src_name": "Orchestration Engine",
      "dst_name": "Static Analysis Results"
    },
    {
      "relation": "orchestrates",
      "src_name": "Orchestration Engine",
      "dst_name": "AI Agents"
    },
    {
      "relation": "exchanges data with",
      "src_name": "Orchestration Engine",
      "dst_name": "AI Agents"
    },
    {
      "relation": "utilizes",
      "src_name": "AI Agents",
      "dst_name": "Prompt Factory"
    },
    {
      "relation": "generates prompts for",
      "src_name": "Prompt Factory",
      "dst_name": "AI Agents"
    },
    {
      "relation": "sends responses to",
      "src_name": "AI Agents",
      "dst_name": "Agent Response Processor"
    },
    {
      "relation": "processes responses for",
      "src_name": "Agent Response Processor",
      "dst_name": "Orchestration Engine"
    },
    {
      "relation": "consumes",
      "src_name": "AI Agents",
      "dst_name": "Static Analysis Results"
    },
    {
      "relation": "provides prompts to",
      "src_name": "Prompt Factory",
      "dst_name": "Orchestration Engine"
    },
    {
      "relation": "provides processed data to",
      "src_name": "Agent Response Processor",
      "dst_name": "AI Agents"
    }
  ]
}
